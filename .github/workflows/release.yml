name: release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # Fetch latest tag using the GitHub API
      - name: Get the latest tag
        id: get-latest-tag
        run: |
          set -eux
          
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/tags")
          
          # Extract the most recent tag or default to v0.0.0
          latest_tag=$(echo "$response" | jq -r '.[0].name // "v0.0.0"')
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      # Calculate the new minor version
      - name: Calculate next minor version
        id: compute-next-version
        run: |
          set -eux
          
          latest_tag=${{ env.latest_tag }}
          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            new_minor=$((minor + 1))
            new_tag="v${major}.${new_minor}.0"
            echo "New tag: $new_tag"
            echo "new_tag=$new_tag" >> $GITHUB_ENV
          else
            echo "Invalid tag or no tag found. Defaulting to v0.1.0"
            echo "new_tag=v0.1.0" >> $GITHUB_ENV
          fi

      # Create a new GitHub release using the API
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux
          
          new_tag=${{ env.new_tag }}
          release_response=$(curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d '{"tag_name": "'"$new_tag"'", "name": "'"$new_tag"'", "body": "Automatically created release for tag '"$new_tag"'.", "prerelease": false}' \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          
          echo "Release Response: $release_response"
